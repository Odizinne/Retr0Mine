name: Build and Release

on:
  workflow_dispatch:

env:
  QT_VERSION: '6.9.0'

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Visual Studio shell
        uses: egor-tensin/vs-shell@v2
        with:
          arch: x64

      - name: Install Qt
        id: qt
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ env.QT_VERSION }}
          add-tools-to-path: true
          cache: true
          modules: 'qtmultimedia'

      - name: Generate and Build with CMake
        shell: pwsh
        run: |
          mkdir -p build
          cd build
          cmake ..
          cmake --build . --config Release
          cmake --install . --config Release

      - name: Zip binaries folder
        shell: pwsh
        run: |
          $zipFile = "build/Retr0Mine_msvc_64.zip"
          $folder = "build/install"
          Compress-Archive -Path $folder -DestinationPath $zipFile

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Retr0Mine_msvc_64
          path: build/Retr0Mine_msvc_64.zip

      - name: Create Installer 
        shell: pwsh
        run: |
          $env:Path += ";${env:ProgramFiles(x86)}\Inno Setup 6"
          iscc.exe tools/installer.iss

      - name: Upload Installer
        uses: actions/upload-artifact@v4
        with:
          name: Retr0Mine_Installer
          path: tools/Output/Retr0Mine_Installer.exe

  linux-build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ env.QT_VERSION }}
          host: 'linux'
          cache: true
          add-tools-to-path: true
          modules: 'qtmultimedia'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libgl1-mesa-dev libwayland-dev 

      - name: Generate and Build with CMake
        shell: pwsh
        run: |
          mkdir -p build
          cd build
          cmake ..
          cmake --build . --config Release
          cmake --install . --config Release
          cp ../resources/icons/icon.png ./install

      - name: Replace symlinks with real files
        shell: bash
        run: |
          echo "Replacing symlinks with real files..."
          cd build/install/lib
          for f in $(find . -type l); do
            target=$(readlink -f "$f")
            if [ -f "$target" ]; then
              echo "Replacing symlink $f -> $target"
              # Get the filename only
              target_name=$(basename "$target")
              # Remove the symlink
              rm "$f"
              # Copy the real file to the symlink name
              cp "$target" "$f"
              # Remove the original file if it's not the same as the new file
              if [ "$target" != "$(pwd)/$f" ]; then
                rm "$target"
              fi
            fi
          done

      - name: Cleanup Libraries and Plugins
        shell: bash
        run: |
          # Cleanup plugins
          echo "Cleaning up unnecessary plugin folders..."
          cd build/install/plugins
          if [ -d "." ]; then
            echo "Removing specified plugin folders..."
            rm -rf iconengines imageformats networkinformation qmltooling tls
          else
            echo "Plugins directory not found, skipping plugin cleanup"
          fi
          
      - name: Zip AppDir
        run: |
          cd build/install
          zip -r ../Retr0Mine_Linux.zip ./*

      - name: Upload Build
        uses: actions/upload-artifact@v4
        with:
          name: Retr0Mine_Linux
          path: build/Retr0Mine_Linux.zip
          
  release:
    runs-on: ubuntu-latest
    needs: [build, linux-build]
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download Windows ZIP
        uses: actions/download-artifact@v4
        with:
          name: Retr0Mine_msvc_64
      - name: Download Windows Installer
        uses: actions/download-artifact@v4
        with:
          name: Retr0Mine_Installer
          path: installer
      - name: Download Linux Build
        uses: actions/download-artifact@v4
        with:
          name: Retr0Mine_Linux
      - name: Download Steam Deck Installer Desktop File
        run: |
          wget https://raw.githubusercontent.com/Odizinne/Retr0Mine/main/tools/Retr0Mine_SteamDeckInstaller.desktop
      - name: Bump version and create release
        id: bump_release
        run: |
          git fetch --tags
          
          # Determine the latest major version tag
          LAST_MAJOR_TAG=$(git tag --list 'v*.*.*' | sed -E 's/^v?([0-9]+)\..*/\1/' | sort -nr | head -n 1)
          
          # Increment the major version number
          if [ -z "$LAST_MAJOR_TAG" ]; then
            NEW_TAG="v1"
          else
            NEW_TAG="v$(($LAST_MAJOR_TAG + 1))"
          fi
          # Check if the tag already exists
          if git rev-parse "$NEW_TAG" >/dev/null 2>&1; then
            echo "Tag '$NEW_TAG' already exists. Incrementing to next major version."
            LAST_MAJOR_TAG=$(git tag --list 'v*' | sed -E 's/^v?([0-9]+).*/\1/' | sort -nr | head -n 1)
            NEW_TAG="v$(($LAST_MAJOR_TAG + 1))"
          fi
          echo "New tag is $NEW_TAG"
          git tag $NEW_TAG
          git push origin $NEW_TAG
          echo "new_tag=$NEW_TAG" >> $GITHUB_ENV
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.new_tag }}
          name: ${{ env.new_tag }}
          draft: true
          files: |
            Retr0Mine_msvc_64.zip
            installer/Retr0Mine_Installer.exe
            Retr0Mine_Linux.zip
            Retr0Mine_SteamDeckInstaller.desktop
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}